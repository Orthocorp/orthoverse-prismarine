'use strict';

const Vec3 = require('vec3').Vec3;
const mcData = require('minecraft-data')('1.16.1')
const rand = require('random-seed')

function mountain(chunk, level, seedRand) {
  for (let h = 0; h < 8; h++) {
    for (let x = 0 + h; x < 16 - h; x++) {
      for (let y = 0 + h; y < 16 - h; y++) {
        if (seedRand(20) < 18) {
          if (h > 4 + seedRand(3)) {
            const pos = new Vec3(x, h + level + 2, y)
            chunk.setBlockType(pos, mcData.blocksByName.grass_block.id)
            chunk.setBlockData(pos, 0)
            chunk.setSkyLight(pos, 15)
            const posUnder = new Vec3(x, h + level + 1, y)
            chunk.setBlockType(posUnder, mcData.blocksByName.dirt.id)
            chunk.setBlockData(posUnder, 0)
            chunk.setSkyLight(posUnder, 15)
            const posUnder2 = new Vec3(x, h + level, y)
            chunk.setBlockType(posUnder2, mcData.blocksByName.dirt.id)
            chunk.setBlockData(posUnder2, 0)
            chunk.setSkyLight(posUnder2, 15)
          } else {
            const pos = new Vec3(x, h + level + 1, y)
            chunk.setBlockType(pos, mcData.blocksByName.grass_block.id)
            chunk.setBlockData(pos, 1)
            chunk.setSkyLight(pos, 15)
            const posUnder = new Vec3(x, h + level, y)
            chunk.setBlockType(posUnder, mcData.blocksByName.dirt.id)
            chunk.setBlockData(posUnder, 0)
            chunk.setSkyLight(posUnder, 15)
          }
          if ((h === 7) && (seedRand(4) < 3)) {
            const pos = new Vec3(x, h + level + 3, y)
            chunk.setBlockType(pos, mcData.blocksByName.grass_block.id)
            chunk.setBlockData(pos, 0)
            chunk.setSkyLight(pos, 15)
            const posUnder = new Vec3(x, h + level + 2, y)
            chunk.setBlockType(posUnder, mcData.blocksByName.dirt.id)
            chunk.setBlockData(posUnder, 0)
            chunk.setSkyLight(posUnder, 15)
            const posUnder2 = new Vec3(x, h + level + 1, y)
            chunk.setBlockType(posUnder2, mcData.blocksByName.dirt.id)
            chunk.setBlockData(posUnder2, 0)
            chunk.setSkyLight(posUnder2, 15)
          }
        } else {
          const pos = new Vec3(x, h + level, y)
          chunk.setBlockType(pos, mcData.blocksByName.grass_block.id)
          chunk.setBlockData(pos, 1)
          chunk.setSkyLight(pos, 15)
        }
      }
    }
  }
}

function hill(chunk, level, seedRand) {
  for (let h = 0; h < 3; h++) {
    for (let x = 0 + h; x < 16 - h; x++) {
      for (let y = 0 + h; y < 16 - h; y++) {
        let data = 1;
        if ((((x === 0 + h) && (y === 0 + h)) || 
             ((x === 0 + h) && (y === 15 - h))) ||
            (((x === 15 - h) && (y === 0 + h)) ||
             ((x === 15 - h) && (y === 15 - h)))
        ) {
          // might want to do something in the corner
        } else {
          const pos = new Vec3(x, h + level + 1, y)
          chunk.setBlockType(pos, mcData.blocksByName.grass_block.id)
          chunk.setBlockData(pos, data)
          chunk.setSkyLight(pos, 15)
          const posUnder = new Vec3(x, h + level, y)
          chunk.setBlockType(posUnder, mcData.blocksByName.dirt.id)
          chunk.setBlockData(posUnder, 0)
          chunk.setSkyLight(posUnder, 15)
        }
      }
    }
  }
  for (let x = 3; x < 16 - 3; x++) {
    for (let y = 3; y < 16 - 3; y++) {
      if (seedRand(10) === 0) {
        const pos = new Vec3(x, level + 4, y)
        chunk.setBlockType(pos, mcData.blocksByName.grass.id)
        chunk.setSkyLight(pos, 15)
      }
    }
  }
}

function lake(chunk, seedRand) {
  for (let h = 13; h < 23; h++) {
    for (let x = 0; x < 16; x++) {
      for (let y = 0; y < 16; y++) {
        let data = 1;
        const pos = new Vec3(x, h, y)
        if (h < 21) {
          chunk.setBlockType(pos, mcData.blocksByName.sand.id)
        } else {
          chunk.setBlockType(pos, mcData.blocksByName.air.id)
        }
        chunk.setBlockData(pos, 0)
        chunk.setSkyLight(pos, h - 8)
      }
    }
  }
  for (let h = 0; h < 7; h++) {
    for (let x = 0 + h; x < 16 - h; x++) {
      for (let y = 0 + h; y < 16 - h; y++) {
        const pos = new Vec3(x, 20 - h, y)
        const grassRand = seedRand(20)
        if ((grassRand < 18) || ( h === 0)) {
         chunk.setBlockType(pos, mcData.blocksByName.water.id)
         chunk.setBlockData(pos, 0)
         chunk.setSkyLight(pos, h - 8)
        } else {
          if (h === 6) {
            chunk.setBlockType(pos, mcData.blocksByName.tall_seagrass.id)
            chunk.setBlockData(pos, 0)
            chunk.setSkyLight(pos, h - 8)
          } else {
            chunk.setBlockType(pos, mcData.blocksByName.seagrass.id)
            chunk.setBlockData(pos, 0)
            chunk.setSkyLight(pos, h - 8)
          }
        }
      }
    }
  }
}

function deciduous(chunk, level, seedRand) {
  const coordArray = [
    [1,1], [6,1], [12,1], 
    [1,6], [6,6], [12,6],
    [1,12], [6,12], [12,12]
  ]
  coordArray.forEach((coord) => {
    const x = coord[0] + seedRand(3)
    const y = coord[1] + seedRand(3)
    const treeRand = seedRand(3)
    let height = 1
    if (seedRand(5) < 3) {height = 0}
    for (let z = level + 1; z < level + 7 + height; z++) {
      if (z > level + 2) {
        for (let ax = -1; ax < 2; ax++) {
          for (let ay = -1; ay < 2; ay++) {
            const pos = new Vec3(x + ax, z, y + ay)
            if (treeRand === 0) {
              if (seedRand(10) < 7) { chunk.setBlockType(pos, mcData.blocksByName.birch_leaves.id) }
            } else {
              if (seedRand(10) < 8) { chunk.setBlockType(pos, mcData.blocksByName.oak_leaves.id) }
            }
            chunk.setSkyLight(pos, 15)
          }
        }
      }
      if (z < level + 6 + height) {
        const pos2 = new Vec3(x, z, y)
        if (treeRand === 0) {
          chunk.setBlockType(pos2, mcData.blocksByName.birch_wood.id)
        } else {
          chunk.setBlockType(pos2, mcData.blocksByName.oak_wood.id)
        }
        chunk.setSkyLight(pos2, 15)
      }
    }
  })
}

function evergreen(chunk, level, seedRand) {
  const coordArray = [
    [1,1], [6,1], [12,1], 
    [1,6], [6,6], [12,6],
    [1,12], [6,12], [12,12]
  ]
  coordArray.forEach((coord) => {
    const x = coord[0] + seedRand(3)
    const y = coord[1] + seedRand(3)
    let height = 1
    if (seedRand(5) < 3) {height = 0}
    for (let z = level + 1; z < level + 7 + height; z++) {
      if (z > level + 2) {
        let adj = 0
        if (z > level + 3 + height) { adj = 1}
        if (z > level + 5 + height) { adj = 2}
        for (let ax = -2 + adj; ax < 3 - adj; ax++) {
          for (let ay = -2 +  adj; ay < 3 - adj; ay++) {
            const pos = new Vec3(x + ax, z, y + ay)
            chunk.setBlockType(pos, mcData.blocksByName.spruce_leaves.id) 
            chunk.setSkyLight(pos, 15)
          }
        }
      }
      if (z < level + 6 + height) {
        const pos2 = new Vec3(x, z, y)
        chunk.setBlockType(pos2, mcData.blocksByName.spruce_wood.id)
        chunk.setSkyLight(pos2, 15)
      }
    }
  })
}

function quarry(chunk, seedRand) {
  for (let h = 14; h < 24; h++) {
    for (let x = 0; x < 16; x++) {
      for (let y = 0; y < 16; y++) {
        let data = 1;
        const pos = new Vec3(x, h, y)
        if (h < 21) {
          chunk.setBlockType(pos, mcData.blocksByName.sand.id)
        } else {
          chunk.setBlockType(pos, mcData.blocksByName.air.id)
        }
        chunk.setBlockData(pos, 0)
        chunk.setSkyLight(pos, h - 8)
      }
    }
  }
  for (let h = 0; h < 7; h++) {
    for (let x = 0 + h; x < 16 - h; x++) {
      for (let y = 0 + h; y < 16 - h; y++) {
        const pos = new Vec3(x, 21 - h, y)
        chunk.setBlockType(pos, mcData.blocksByName.air.id)
        chunk.setBlockData(pos, 0)
        chunk.setSkyLight(pos, h - 8)
      }
    }
  }
}


function generation ({ version = '1.16.1', seed } = {}) {
  const size = 101*16*6
  const Chunk = require('prismarine-chunk')(version)
  const majorVersion = mcData.version.majorVersion

  function generateSimpleChunk (chunkX, chunkY) {
    const chunk = new Chunk()
    const worldX = chunkX * 16 + size / 2
    const worldY = chunkY * 16 + size / 2
    const seedRand = rand.create(seed + ':' + chunkX + ':' + chunkY)
    const level = 20 + seedRand(2)

    for (let x = 0; x < 16; x++) {
      for (let y = 0; y < 16; y++) {
        const bedrockheight = 1 + seedRand(4)
        for (let z = 0; z < 256; z++) {
          let block
          let data
          if (z < bedrockheight) { 
            block = mcData.blocksByName.bedrock.id 
          } else if (z === level -1) {
            block = mcData.blocksByName.dirt.id
          } else if (z < level - 1) {
            block = (seedRand(10) < 5) ? mcData.blocksByName.dirt.id : mcData.blocksByName.granite.id
          } else if (z === level) {
            block = mcData.blocksByName.grass_block.id  // Set surface sand/grass
            data = 1
          } else if (z === level + 1 && seedRand(10) === 0) {
            block = mcData.blocksByName.grass.id
          }
          const pos = new Vec3(x, z, y)
          if (block) { 
            chunk.setBlockType(pos, block)
          }
          if (data) {
            chunk.setBlockData(pos, data)
          }
          chunk.setSkyLight(pos, 15)
        }
      }
    }
    const thisRand = seedRand(16)
    if (thisRand === 0) { hill(chunk, level, seedRand) }; // lush hill
    if (thisRand === 1) { mountain(chunk, level, seedRand) }; // lush mountain
    if (thisRand === 2) { lake(chunk, seedRand) };
    if (thisRand === 3) { }; // plains
    if (thisRand === 4) { deciduous(chunk, level, seedRand) };
    if (thisRand === 5) { }; // lush plains
    if (thisRand === 6) { quarry(chunk, seedRand) };
    if (thisRand === 7) { evergreen(chunk, level, seedRand) };
    if (thisRand === 8) { hill(chunk, level, seedRand) }; // barren hill
    if (thisRand === 9) { mountain(chunk, level, seedRand) }; // barren mountain
    if (thisRand === 10) { lake(chunk, seedRand) };
    if (thisRand === 11) { }; // desert plains
    if (thisRand === 12) { deciduous(chunk, level, seedRand) };
    if (thisRand === 13) { }; // badlands
    if (thisRand === 14) { quarry(chunk, seedRand) }; // cobblestone quarry
    if (thisRand === 15) { deciduous(chunk, level, seedRand) };
    return chunk
  }

  return generateSimpleChunk
}



module.exports = generation;
