'use strict';

const Vec3 = require('vec3').Vec3;
const mcData = require('minecraft-data')('1.16.1')
const rand = require('random-seed')


function henge(chunk, level, seedRand, posX, posY) {
  const hengeColumns = [
    [14,0],[13,0],[11,1],[10,1],[8,2],[7,2],[5,4],
    [4,5],[2,7],[2,8],[1,10],[1,11],[0,13],[0,14]
  ];
  const hengeLintels = [
    [15,0],[12,0],[12,1],[9,1],[9,2],[6,2],[6,3],[5,3],
    [4,4],[3,5],[3,6],[2,6],[1,8],[1,9],[1,12],[0,12],[0,15]
  ];
  const hengeRocks = [
    [13,4],[10,5],[7,7],[5,10],[3,13],[14,11],[11,14]
  ];

  const dolmenColumnsN = [
    [14,8],[13,8],[10,9],[9,10],[8,12],[7,13],[6,15]
  ];
  const dolmenColumnsS = [
    [6,0],[6,2],[6,3]
  ];

  const dolmenLintelsN = [
    [15,8],[12,8]
  ];
  const dolmenLintelsS = [
    [6,1]
  ];

  const cobble = mcData.blocksByName.stone.id;
  const stone = mcData.blocksByName.stone_bricks.id;

  function splurge(a, b) {

    for (let h=22; h < 27; h++) {
      for (let i=0; i < hengeColumns.length; i++) {
        const pos = new Vec3(
          Math.abs(a * 15 - hengeColumns[i][0]),
          h,
          Math.abs(b * 15 - hengeColumns[i][1])
        );
        if (h === 26) { 
          chunk.setBlockType(pos, stone)
        } else {
          chunk.setBlockType(pos, cobble)
        }
      }
    }
    for (let i=0; i < hengeLintels.length; i++) {
      const pos = new Vec3(
        Math.abs(a * 15 - hengeLintels[i][0]),
        26,
        Math.abs(b * 15 - hengeLintels[i][1])
      );
      chunk.setBlockType(pos, stone)
    }

    for (let h = 22; h < 25; h++) {
      for (let i=0; i < hengeRocks.length; i++) {
        const pos = new Vec3(
          Math.abs(a * 15 - hengeRocks[i][0]),
          h,
          Math.abs(b * 15 - hengeRocks[i][1])
        );
        chunk.setBlockType(pos, stone)
      }
    }

    if (b === 0) {
      for (let h=22; h < 28; h++) {
        for (let i=0; i < dolmenColumnsN.length; i++) {
          const pos = new Vec3(
            Math.abs(a * 15 - dolmenColumnsN[i][0]),
            h,
            dolmenColumnsN[i][1]
          );
          if (h == 27) { 
            chunk.setBlockType(pos, stone)
          } else {
            chunk.setBlockType(pos, cobble)
          }
        }
      }
      for (let i=0; i < dolmenLintelsN.length; i++) { 
        const pos = new Vec3(
          Math.abs(a * 15 - dolmenLintelsN[i][0]),
          27,
          dolmenLintelsN[i][1]
          );   
          chunk.setBlockType(pos, stone)
      }
    } else {
      for (let h = 22; h < 28; h++) {
        for (let i=0; i < dolmenColumnsS.length; i++) {
          const pos = new Vec3(
            Math.abs(a * 15 - dolmenColumnsS[i][0]),
            h,
            dolmenColumnsS[i][1]
          );
          if (h == 27) { 
            chunk.setBlockType(pos, stone)
          } else {
            chunk.setBlockType(pos, cobble)
          }
        }
      }
      for (let i=0; i < dolmenLintelsS.length; i++) { 
        const pos = new Vec3(
          Math.abs(a * 15 - dolmenLintelsS[i][0]),
          27,
          dolmenLintelsS[i][1]
          );   
          chunk.setBlockType(pos, stone)
      }
    }
  }

  if (((posX == 2) || (posX == 3)) &&
      ((posY == 2) || (posY == 3))) { splurge(posX - 2, posY - 2) }
}

function castle(chunk, level, seedRand, posX, posY) {

  const wall = [
    [15,13],[14,13],[13,13],[13,14],[13,15]
  ]
  const crenal = [
    [15,13],[13,15]
  ]

  let pos
  const diorite = mcData.blocksByName.diorite.id;
  const andesite = mcData.blocksByName.polished_diorite.id;
  const stone = mcData.blocksByName.stone_bricks.id;
  const air = mcData.blocksByName.air.id;
  const cobble = mcData.blocksByName.cobblestone.id;
  const oak = mcData.blocksByName.oak_wood.id;

  // tower floor
  for (let x=13; x<16; x++) {
    for (let y=13; y<16; y++) {
      const pos = new Vec3(Math.abs((posX - 2) * 15 - x),level,Math.abs((posY - 2) * 15 - y))
      chunk.setBlockType(pos, cobble)
    } 
  }

  // walls
  for (let h=level + 1; h < level + 8; h++) {
    for (let i=0; i < wall.length; i++) {
        pos = new Vec3(
        Math.abs((posX - 2) * 15 - wall[i][0]),
        h,
        Math.abs((posY - 2) * 15 - wall[i][1])
      );
      if (h == level + 7) {
        chunk.setBlockType(pos, oak)
      } else {
        chunk.setBlockType(pos, andesite)
      }
    }
    for (let h=0; h<2; h++) {
      for (let x =12; x < 16; x++) {
          pos = new Vec3(
          Math.abs((posX - 2) * 15 - x),
          level + 7 + h,
          Math.abs((posY - 2) * 15 - 12)
        );
        chunk.setBlockType(pos, andesite)
      }
      for (let y =13; y < 16; y++) {
          pos = new Vec3(
          Math.abs((posX - 2) * 15 - 12),
          level + 7 + h,
          Math.abs((posY - 2) * 15 - y)
        );
        chunk.setBlockType(pos, andesite)
      }
    }
    pos = new Vec3(
      Math.abs((posX - 2) * 15 - 14),
      level + 8,
      Math.abs((posY - 2) * 15 - 12)
    );
    chunk.setBlockType(pos, air)
    pos = new Vec3(
      Math.abs((posX - 2) * 15 - 12),
      level + 8,
      Math.abs((posY - 2) * 15 - 14)
    );
    chunk.setBlockType(pos, air)
  }


  switch (posX * 10 + posY) {
  case 22:
    pos = new Vec3(14, level + 3, 15);
    // stairs
    chunk.setBlockType(pos.offset(0,0,0), oak);   
    chunk.setBlockType(pos.offset(0,1,-1), oak); 
    chunk.setBlockType(pos.offset(1,2,-1), oak); 
    chunk.setBlockType(pos.offset(0,4,0), oak); 
    chunk.setBlockType(pos.offset(1,4,0), oak); 
    break;
  case 32:
    pos = new Vec3(0, level + 6, 14);
    // stairs
    chunk.setBlockType(pos.offset(0,0,0), oak);   
    chunk.setBlockType(pos.offset(1,1,0), oak); 
    chunk.setBlockType(pos.offset(1,1,1), oak);
    chunk.setBlockType(pos.offset(0,1,1), oak);   
    break;
  case 23:
    pos = new Vec3(15, level + 1, 2);
    chunk.setBlockType(pos, air);
    chunk.setBlockType(pos.offset(0,1,0), air);
    chunk.setBlockType(pos.offset(0,2,0), stone);
    chunk.setBlockType(pos.offset(-1,0,0), stone);
    chunk.setBlockType(pos.offset(-1,1,0), stone);
    chunk.setBlockType(pos.offset(-1,2,0), stone);
    // stairs
    // chunk.setBlockType(pos.offset(0,-1,-1), oak);   
    chunk.setBlockType(pos.offset(-1,0,-1), oak); 
    chunk.setBlockType(pos.offset(-1,1,-2), oak);
    //floor
    chunk.setBlockType(pos.offset(0,6,-2), oak); 
    chunk.setBlockType(pos.offset(-1,6,-2), oak);
    chunk.setBlockType(pos.offset(-1,6,-1), oak); 
    chunk.setBlockType(pos.offset(0,6,-1), oak);
    break;
  case 33:
    pos = new Vec3(0, level + 1, 2);
    chunk.setBlockType(pos, air);
    chunk.setBlockType(pos.offset(0,1,0), air);
    chunk.setBlockType(pos.offset(0,2,0), stone);
    chunk.setBlockType(pos.offset(1,0,0), stone);
    chunk.setBlockType(pos.offset(1,1,0), stone);
    chunk.setBlockType(pos.offset(1,2,0), stone);
    //floor
    chunk.setBlockType(pos.offset(0,6,-2), oak); 
    chunk.setBlockType(pos.offset(1,6,-2), oak);
    chunk.setBlockType(pos.offset(1,6,-1), oak); 
    chunk.setBlockType(pos.offset(0,6,-1), oak);
    break;
  }

}

module.exports = {
  henge, castle
};
