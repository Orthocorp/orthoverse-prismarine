
const THREE = require('three')
const TWEEN = require('@tweenjs/tween.js')
const { WorldRenderer } = require('./worldrenderer')
const { Entities } = require('./entities')
const { Primitives } = require('./primitives')
const { getVersion } = require('./version')
const { Vec3 } = require('vec3')

class Viewer {
  constructor (renderer) {
    this.scene = new THREE.Scene()
    this.scene.background = new THREE.Color(0xdf915e) // 'lightblue' 0xdf915e

    this.ambientLight = new THREE.AmbientLight(0xcccccc)
    this.scene.add(this.ambientLight)

    this.directionalLight = new THREE.DirectionalLight(0xffffff, 0.5)
    this.directionalLight.position.set(1, 1, 0.5).normalize()
    this.directionalLight.castShadow = true
    this.scene.add(this.directionalLight)

    const size = renderer.getSize(new THREE.Vector2())
    this.camera = new THREE.PerspectiveCamera(75, size.x / size.y, 0.1, 1000)

    this.world = new WorldRenderer(this.scene)
    this.entities = new Entities(this.scene)
    this.primitives = new Primitives(this.scene, this.camera)

    this.domElement = renderer.domElement

    this.firstPerson = true
  }

  setVersion (version) {
    version = getVersion(version)
    console.log('Using version: ' + version)
    this.version = version
    this.world.setVersion(version)
    this.entities.clear()
    this.primitives.clear()
  }

  addColumn (x, z, chunk) {
    this.world.addColumn(x, z, chunk)
  }

  removeColumn (x, z) {
    this.world.removeColumn(x, z)
  }

  setBlockStateId (pos, stateId) {
    this.world.setBlockStateId(pos, stateId)
  }

  updateEntity (e) {
    this.entities.update(e)
  }

  updatePrimitive (p) {
    this.primitives.update(p)
  }

  setFirstPersonCamera (pos, yaw, pitch, bot) {
    if (pos) {
      // need to move the position of the eyeview to the front of the face
      const forward = 0.195
      let xx = pos.x
      let zz = pos.z
      xx = xx - forward * Math.sin(yaw)
      zz = zz - forward * Math.cos(yaw)

      new TWEEN.Tween(this.camera.position).to({ x: xx, y: pos.y + 1.6, z: zz}, 50).start()
    }
    this.camera.rotation.set(pitch, yaw, 0, 'ZYX')
    this.entities.update(bot)
  }

  setThirdPersonCamera (pos, yaw, pitch, bot) {
    if (pos) {
      let xx = pos.x
      let zz = pos.z
      xx = xx + 3 * Math.sin(yaw + pitch + (Math.PI/2))
      zz = zz + 3 * Math.cos(yaw + pitch + (Math.PI/2))

      new TWEEN.Tween(this.camera.position).to({ x: xx, y: pos.y + 3, z: zz}, 50).start()
    }
    this.camera.rotation.set(-Math.PI/6, yaw + pitch + (Math.PI/2), 0, 'ZYX')
    this.entities.update(bot)
  }

  /* setThirdPersonCamera (pos, yaw, pitch, bot) {
    if (pos) {
      // this.camera.up = new THREE.Vector3(0,1,0);
      const yawMod = (yaw + Math.PI/2) % (2 * Math.PI)
      const zadj = -1 * Math.cos(yawMod) * 3
      const xadj = Math.sin(yawMod) * 3
      const cameraLoc = new THREE.Vector3(pos.x - xadj, pos.y + 3, pos.z - zadj)
      const playerLoc = new THREE.Vector3(pos.x, pos.y, pos.z)
      let lookVec = new THREE.Vector3()
      lookVec = playerLoc.clone().sub(cameraLoc)
      new TWEEN.Tween(this.camera.position).to(
        cameraLoc, 50
      ).start()
      // this.camera.lookAt(lookVec)
    }
    this.camera.rotation.set(Math.PI * 0.25, yaw, 0, 'ZYX')
    this.entities.update(bot)
  } */

  listen (emitter) {
    emitter.on('entity', (e) => {
      this.updateEntity(e)
    })

    emitter.on('primitive', (p) => {
      this.updatePrimitive(p)
    })

    emitter.on('loadChunk', ({ x, z, chunk }) => {
      this.addColumn(x, z, chunk)
    })

    emitter.on('unloadChunk', ({ x, z }) => {
      this.removeColumn(x, z)
    })

    emitter.on('blockUpdate', ({ pos, stateId }) => {
      this.setBlockStateId(new Vec3(pos.x, pos.y, pos.z), stateId)
    })

    this.domElement.addEventListener('pointerdown', (evt) => {
      const raycaster = new THREE.Raycaster()
      const mouse = new THREE.Vector2()
      mouse.x = (evt.clientX / this.domElement.clientWidth) * 2 - 1
      mouse.y = -(evt.clientY / this.domElement.clientHeight) * 2 + 1
      raycaster.setFromCamera(mouse, this.camera)
      const ray = raycaster.ray
      emitter.emit('mouseClick', { origin: ray.origin, direction: ray.direction, button: evt.button })
    })
  }

  update () {
    TWEEN.update()
  }

  async waitForChunksToRender () {
    await this.world.waitForChunksToRender()
  }
}

module.exports = { Viewer }
